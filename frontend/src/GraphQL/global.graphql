"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Error {
    code: String!
    message: String
}

type Pagination {
    total: Int!
    page: Int!
    pageSize: Int!
    pageCount: Int!
}

type DeleteMutationResponse {
    documentId: ID!
}

enum PublicationStatus {
    DRAFT
    PUBLISHED
}

input IDFilterInput {
    and: [ID]
    or: [ID]
    not: IDFilterInput
    eq: ID
    eqi: ID
    ne: ID
    nei: ID
    startsWith: ID
    endsWith: ID
    contains: ID
    notContains: ID
    containsi: ID
    notContainsi: ID
    gt: ID
    gte: ID
    lt: ID
    lte: ID
    null: Boolean
    notNull: Boolean
    in: [ID]
    notIn: [ID]
    between: [ID]
}

input BooleanFilterInput {
    and: [Boolean]
    or: [Boolean]
    not: BooleanFilterInput
    eq: Boolean
    eqi: Boolean
    ne: Boolean
    nei: Boolean
    startsWith: Boolean
    endsWith: Boolean
    contains: Boolean
    notContains: Boolean
    containsi: Boolean
    notContainsi: Boolean
    gt: Boolean
    gte: Boolean
    lt: Boolean
    lte: Boolean
    null: Boolean
    notNull: Boolean
    in: [Boolean]
    notIn: [Boolean]
    between: [Boolean]
}

input StringFilterInput {
    and: [String]
    or: [String]
    not: StringFilterInput
    eq: String
    eqi: String
    ne: String
    nei: String
    startsWith: String
    endsWith: String
    contains: String
    notContains: String
    containsi: String
    notContainsi: String
    gt: String
    gte: String
    lt: String
    lte: String
    null: Boolean
    notNull: Boolean
    in: [String]
    notIn: [String]
    between: [String]
}

input IntFilterInput {
    and: [Int]
    or: [Int]
    not: IntFilterInput
    eq: Int
    eqi: Int
    ne: Int
    nei: Int
    startsWith: Int
    endsWith: Int
    contains: Int
    notContains: Int
    containsi: Int
    notContainsi: Int
    gt: Int
    gte: Int
    lt: Int
    lte: Int
    null: Boolean
    notNull: Boolean
    in: [Int]
    notIn: [Int]
    between: [Int]
}

input FloatFilterInput {
    and: [Float]
    or: [Float]
    not: FloatFilterInput
    eq: Float
    eqi: Float
    ne: Float
    nei: Float
    startsWith: Float
    endsWith: Float
    contains: Float
    notContains: Float
    containsi: Float
    notContainsi: Float
    gt: Float
    gte: Float
    lt: Float
    lte: Float
    null: Boolean
    notNull: Boolean
    in: [Float]
    notIn: [Float]
    between: [Float]
}

input DateTimeFilterInput {
    and: [DateTime]
    or: [DateTime]
    not: DateTimeFilterInput
    eq: DateTime
    eqi: DateTime
    ne: DateTime
    nei: DateTime
    startsWith: DateTime
    endsWith: DateTime
    contains: DateTime
    notContains: DateTime
    containsi: DateTime
    notContainsi: DateTime
    gt: DateTime
    gte: DateTime
    lt: DateTime
    lte: DateTime
    null: Boolean
    notNull: Boolean
    in: [DateTime]
    notIn: [DateTime]
    between: [DateTime]
}

input JSONFilterInput {
    and: [JSON]
    or: [JSON]
    not: JSONFilterInput
    eq: JSON
    eqi: JSON
    ne: JSON
    nei: JSON
    startsWith: JSON
    endsWith: JSON
    contains: JSON
    notContains: JSON
    containsi: JSON
    notContainsi: JSON
    gt: JSON
    gte: JSON
    lt: JSON
    lte: JSON
    null: Boolean
    notNull: Boolean
    in: [JSON]
    notIn: [JSON]
    between: [JSON]
}

type ComponentSharedSlider {
    id: ID!
    files_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
    files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UploadFile]!
}

input ComponentSharedSeoInput {
    id: ID
    metaTitle: String
    metaDescription: String
    shareImage: ID
}

type ComponentSharedSeo {
    id: ID!
    metaTitle: String!
    metaDescription: String!
    shareImage: UploadFile
}

type ComponentSharedRichText {
    id: ID!
    body: String
}

input ComponentSharedQuoteInput {
    id: ID
    title: String
    motto: String
}

type ComponentSharedQuote {
    id: ID!
    title: String
    motto: String
}

enum ENUM_COMPONENTSHAREDMETHOD_NAME {
    Hatha_yoga
    Power_yoga
    Vinyasa_flow
    Kundalini
    Stretching
}

enum ENUM_COMPONENTSHAREDMETHOD_EXPERIENCE {
    beginner
    standard
    professional
    master
}

type ComponentSharedMethod {
    id: ID!
    Name: ENUM_COMPONENTSHAREDMETHOD_NAME!
    Experience: ENUM_COMPONENTSHAREDMETHOD_EXPERIENCE!
    Active: Boolean
    Icon: UploadFile
}

type ComponentSharedMedia {
    id: ID!
    file: UploadFile
}

type ComponentSharedEventTime {
    id: ID!
    Beginning: DateTime!
    Minutes: Int!
}

input ComponentLandingSectionsSectionTwoInput {
    id: ID
    List_Description: [ComponentSectionIconDescriptionInput]
    Title: ComponentSectionTitleInput
}

type ComponentLandingSectionsSectionTwo {
    id: ID!
    List_Description(filters: ComponentSectionIconDescriptionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSectionIconDescription]
    Title: ComponentSectionTitle
}

input ComponentLandingSectionsSectionThreeInput {
    id: ID
    Button: [ComponentSectionButtonInput]
    Photos: [ID]
    Description: JSON
    Title: ComponentSharedQuoteInput
}

type ComponentLandingSectionsSectionThree {
    id: ID!
    Button(filters: ComponentSectionButtonFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSectionButton]
    Photos_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
    Photos(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UploadFile]!
    Description: JSON
    Title: ComponentSharedQuote
}

input ComponentLandingSectionsSectionSixInput {
    id: ID
    Title: ComponentSectionTitleInput
    Gallery: [ID]
    Description: String
    Button: ComponentSectionButtonInput
    Description2: JSON
}

type ComponentLandingSectionsSectionSix {
    id: ID!
    Title: ComponentSectionTitle!
    Gallery_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
    Gallery(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UploadFile]!
    Description: String
    Button: ComponentSectionButton
    Description2: JSON
}

input ComponentLandingSectionsSectionSevenInput {
    id: ID
    Route: [ComponentSectionHiddenLinkInput]
    Placement: JSON
    Title: String
}

type ComponentLandingSectionsSectionSeven {
    id: ID!
    Route(filters: ComponentSectionHiddenLinkFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSectionHiddenLink]
    Placement: JSON
    Title: String
}

input ComponentLandingSectionsSectionOneInput {
    id: ID
    Title: [ComponentSectionTitleInput]
    Buttons: [ComponentSectionButtonInput]
}

type ComponentLandingSectionsSectionOne {
    id: ID!
    Title(filters: ComponentSectionTitleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSectionTitle]!
    Buttons(filters: ComponentSectionButtonFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSectionButton]!
}

input ComponentLandingSectionsSectionFourInput {
    id: ID
    Title: ComponentSectionTitleInput
    Shape_Titles: [ComponentSectionShapeTitleInput]
}

type ComponentLandingSectionsSectionFour {
    id: ID!
    Title: ComponentSectionTitle!
    Shape_Titles(filters: ComponentSectionShapeTitleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSectionShapeTitle]!
}

input ComponentLandingSectionsSectionFiveInput {
    id: ID
    Title: String
    Button: ComponentSectionButtonInput
    Title2: JSON
}

type ComponentLandingSectionsSectionFive {
    id: ID!
    Title: String!
    Button: ComponentSectionButton
    Title2: JSON
}

input ComponentLandingSectionsSectionEightInput {
    id: ID
    Title: ComponentSectionTitleInput
    FAQ_elements: [ComponentSectionAccordionInput]
    FAQ_detailed: [ComponentSectionDetailedDescriptionInput]
}

type ComponentLandingSectionsSectionEight {
    id: ID!
    Title: ComponentSectionTitle!
    FAQ_elements(filters: ComponentSectionAccordionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSectionAccordion]
    FAQ_detailed(filters: ComponentSectionDetailedDescriptionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSectionDetailedDescription]
}

enum ENUM_COMPONENTSECTIONTITLE_PLACEMENT {
    Center
    Right
    Left
}

input ComponentSectionTitleFiltersInput {
    Title: StringFilterInput
    Placement: StringFilterInput
    and: [ComponentSectionTitleFiltersInput]
    or: [ComponentSectionTitleFiltersInput]
    not: ComponentSectionTitleFiltersInput
}

input ComponentSectionTitleInput {
    id: ID
    Title: String
    Placement: ENUM_COMPONENTSECTIONTITLE_PLACEMENT
}

type ComponentSectionTitle {
    id: ID!
    Title: String!
    Placement: ENUM_COMPONENTSECTIONTITLE_PLACEMENT
}

input ComponentSectionShapeTitleFiltersInput {
    Title: StringFilterInput
    and: [ComponentSectionShapeTitleFiltersInput]
    or: [ComponentSectionShapeTitleFiltersInput]
    not: ComponentSectionShapeTitleFiltersInput
}

input ComponentSectionShapeTitleInput {
    id: ID
    Title: String
    Shape: ID
}

type ComponentSectionShapeTitle {
    id: ID!
    Title: String!
    Shape: UploadFile!
}

input ComponentSectionIconDescriptionFiltersInput {
    Description: JSONFilterInput
    and: [ComponentSectionIconDescriptionFiltersInput]
    or: [ComponentSectionIconDescriptionFiltersInput]
    not: ComponentSectionIconDescriptionFiltersInput
}

input ComponentSectionIconDescriptionInput {
    id: ID
    Icon: ID
    Description: JSON
}

type ComponentSectionIconDescription {
    id: ID!
    Icon: UploadFile!
    Description: JSON
}

input ComponentSectionHiddenLinkFiltersInput {
    Title: StringFilterInput
    Link: StringFilterInput
    and: [ComponentSectionHiddenLinkFiltersInput]
    or: [ComponentSectionHiddenLinkFiltersInput]
    not: ComponentSectionHiddenLinkFiltersInput
}

input ComponentSectionHiddenLinkInput {
    id: ID
    Title: String
    Link: String
}

type ComponentSectionHiddenLink {
    id: ID!
    Title: String!
    Link: String!
}

input ComponentSectionDetailedDescriptionFiltersInput {
    Title: StringFilterInput
    Description: JSONFilterInput
    and: [ComponentSectionDetailedDescriptionFiltersInput]
    or: [ComponentSectionDetailedDescriptionFiltersInput]
    not: ComponentSectionDetailedDescriptionFiltersInput
}

input ComponentSectionDetailedDescriptionInput {
    id: ID
    Title: String
    Description: JSON
}

type ComponentSectionDetailedDescription {
    id: ID!
    Title: String!
    Description: JSON
}

enum ENUM_COMPONENTSECTIONBUTTON_VARIANT {
    primary
    secondary
    transparent
}

input ComponentSectionButtonFiltersInput {
    Variant: StringFilterInput
    Text: StringFilterInput
    Action: StringFilterInput
    and: [ComponentSectionButtonFiltersInput]
    or: [ComponentSectionButtonFiltersInput]
    not: ComponentSectionButtonFiltersInput
}

input ComponentSectionButtonInput {
    id: ID
    Variant: ENUM_COMPONENTSECTIONBUTTON_VARIANT
    Text: String
    Action: String
}

type ComponentSectionButton {
    id: ID!
    Variant: ENUM_COMPONENTSECTIONBUTTON_VARIANT!
    Text: String
    Action: String!
}

input ComponentSectionAccordionFiltersInput {
    Title: StringFilterInput
    Description: StringFilterInput
    and: [ComponentSectionAccordionFiltersInput]
    or: [ComponentSectionAccordionFiltersInput]
    not: ComponentSectionAccordionFiltersInput
}

input ComponentSectionAccordionInput {
    id: ID
    Title: String
    Description: String
}

type ComponentSectionAccordion {
    id: ID!
    Title: String!
    Description: String
}

input UploadFileFiltersInput {
    documentId: IDFilterInput
    name: StringFilterInput
    alternativeText: StringFilterInput
    caption: StringFilterInput
    width: IntFilterInput
    height: IntFilterInput
    formats: JSONFilterInput
    hash: StringFilterInput
    ext: StringFilterInput
    mime: StringFilterInput
    size: FloatFilterInput
    url: StringFilterInput
    previewUrl: StringFilterInput
    provider: StringFilterInput
    provider_metadata: JSONFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [UploadFileFiltersInput]
    or: [UploadFileFiltersInput]
    not: UploadFileFiltersInput
}

type UploadFile {
    documentId: ID!
    name: String!
    alternativeText: String
    caption: String
    width: Int
    height: Int
    formats: JSON
    hash: String!
    ext: String
    mime: String!
    size: Float!
    url: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related: [GenericMorph]
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type UploadFileEntityResponseCollection {
    nodes: [UploadFile!]!
    pageInfo: Pagination!
}

type UploadFileRelationResponseCollection {
    nodes: [UploadFile!]!
}

input I18NLocaleFiltersInput {
    documentId: IDFilterInput
    name: StringFilterInput
    code: StringFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [I18NLocaleFiltersInput]
    or: [I18NLocaleFiltersInput]
    not: I18NLocaleFiltersInput
}

type I18NLocale {
    documentId: ID!
    name: String
    code: String
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type I18NLocaleEntityResponseCollection {
    nodes: [I18NLocale!]!
    pageInfo: Pagination!
}

input ReviewWorkflowsWorkflowFiltersInput {
    documentId: IDFilterInput
    name: StringFilterInput
    stages: ReviewWorkflowsWorkflowStageFiltersInput
    stageRequiredToPublish: ReviewWorkflowsWorkflowStageFiltersInput
    contentTypes: JSONFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [ReviewWorkflowsWorkflowFiltersInput]
    or: [ReviewWorkflowsWorkflowFiltersInput]
    not: ReviewWorkflowsWorkflowFiltersInput
}

input ReviewWorkflowsWorkflowInput {
    name: String
    stages: [ID]
    stageRequiredToPublish: ID
    contentTypes: JSON
    publishedAt: DateTime
}

type ReviewWorkflowsWorkflow {
    documentId: ID!
    name: String!
    stages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ReviewWorkflowsWorkflowStageRelationResponseCollection
    stages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ReviewWorkflowsWorkflowStage]!
    stageRequiredToPublish: ReviewWorkflowsWorkflowStage
    contentTypes: JSON!
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type ReviewWorkflowsWorkflowEntityResponseCollection {
    nodes: [ReviewWorkflowsWorkflow!]!
    pageInfo: Pagination!
}

input ReviewWorkflowsWorkflowStageFiltersInput {
    documentId: IDFilterInput
    name: StringFilterInput
    color: StringFilterInput
    workflow: ReviewWorkflowsWorkflowFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [ReviewWorkflowsWorkflowStageFiltersInput]
    or: [ReviewWorkflowsWorkflowStageFiltersInput]
    not: ReviewWorkflowsWorkflowStageFiltersInput
}

input ReviewWorkflowsWorkflowStageInput {
    name: String
    color: String
    workflow: ID
    publishedAt: DateTime
}

type ReviewWorkflowsWorkflowStage {
    documentId: ID!
    name: String
    color: String
    workflow: ReviewWorkflowsWorkflow
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type ReviewWorkflowsWorkflowStageEntityResponseCollection {
    nodes: [ReviewWorkflowsWorkflowStage!]!
    pageInfo: Pagination!
}

type ReviewWorkflowsWorkflowStageRelationResponseCollection {
    nodes: [ReviewWorkflowsWorkflowStage!]!
}

input UsersPermissionsPermissionFiltersInput {
    documentId: IDFilterInput
    action: StringFilterInput
    role: UsersPermissionsRoleFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [UsersPermissionsPermissionFiltersInput]
    or: [UsersPermissionsPermissionFiltersInput]
    not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
    documentId: ID!
    action: String!
    role: UsersPermissionsRole
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type UsersPermissionsPermissionRelationResponseCollection {
    nodes: [UsersPermissionsPermission!]!
}

input UsersPermissionsRoleFiltersInput {
    documentId: IDFilterInput
    name: StringFilterInput
    description: StringFilterInput
    type: StringFilterInput
    permissions: UsersPermissionsPermissionFiltersInput
    users: UsersPermissionsUserFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [UsersPermissionsRoleFiltersInput]
    or: [UsersPermissionsRoleFiltersInput]
    not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
    name: String
    description: String
    type: String
    permissions: [ID]
    users: [ID]
    publishedAt: DateTime
}

type UsersPermissionsRole {
    documentId: ID!
    name: String!
    description: String
    type: String
    permissions_connection(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
    permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsPermission]!
    users_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
    users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsUser]!
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type UsersPermissionsRoleEntityResponseCollection {
    nodes: [UsersPermissionsRole!]!
    pageInfo: Pagination!
}

input UsersPermissionsUserFiltersInput {
    documentId: IDFilterInput
    username: StringFilterInput
    email: StringFilterInput
    provider: StringFilterInput
    confirmed: BooleanFilterInput
    blocked: BooleanFilterInput
    role: UsersPermissionsRoleFiltersInput
    bookings: BookingFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [UsersPermissionsUserFiltersInput]
    or: [UsersPermissionsUserFiltersInput]
    not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
    username: String
    email: String
    provider: String
    confirmed: Boolean
    blocked: Boolean
    role: ID
    bookings: [ID]
    publishedAt: DateTime
    password: String
}

type UsersPermissionsUser {
    documentId: ID!
    username: String!
    email: String!
    provider: String
    confirmed: Boolean
    blocked: Boolean
    role: UsersPermissionsRole
    bookings_connection(filters: BookingFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): BookingRelationResponseCollection
    bookings(filters: BookingFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Booking]!
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type UsersPermissionsUserEntityResponse {
    data: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponseCollection {
    nodes: [UsersPermissionsUser!]!
    pageInfo: Pagination!
}

type UsersPermissionsUserRelationResponseCollection {
    nodes: [UsersPermissionsUser!]!
}

union AboutBlocksDynamicZone = ComponentSharedMedia | ComponentSharedQuote | ComponentSharedRichText | ComponentSharedSlider | Error

scalar AboutBlocksDynamicZoneInput

input AboutInput {
    title: String
    blocks: [AboutBlocksDynamicZoneInput!]
    publishedAt: DateTime
}

type About {
    documentId: ID!
    title: String
    blocks: [AboutBlocksDynamicZone]
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

union ArticleBlocksDynamicZone = ComponentSharedMedia | ComponentSharedQuote | ComponentSharedRichText | ComponentSharedSlider | Error

scalar ArticleBlocksDynamicZoneInput

input ArticleFiltersInput {
    documentId: IDFilterInput
    title: StringFilterInput
    description: StringFilterInput
    slug: StringFilterInput
    author: AuthorFiltersInput
    category: CategoryFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [ArticleFiltersInput]
    or: [ArticleFiltersInput]
    not: ArticleFiltersInput
}

input ArticleInput {
    title: String
    description: String
    slug: String
    cover: ID
    author: ID
    category: ID
    blocks: [ArticleBlocksDynamicZoneInput!]
    publishedAt: DateTime
}

type Article {
    documentId: ID!
    title: String
    description: String
    slug: String
    cover: UploadFile
    author: Author
    category: Category
    blocks: [ArticleBlocksDynamicZone]
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type ArticleEntityResponseCollection {
    nodes: [Article!]!
    pageInfo: Pagination!
}

type ArticleRelationResponseCollection {
    nodes: [Article!]!
}

input AuthorFiltersInput {
    documentId: IDFilterInput
    name: StringFilterInput
    email: StringFilterInput
    articles: ArticleFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [AuthorFiltersInput]
    or: [AuthorFiltersInput]
    not: AuthorFiltersInput
}

input AuthorInput {
    name: String
    avatar: ID
    email: String
    articles: [ID]
    publishedAt: DateTime
}

type Author {
    documentId: ID!
    name: String
    avatar: UploadFile
    email: String
    articles_connection(filters: ArticleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ArticleRelationResponseCollection
    articles(filters: ArticleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Article]!
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type AuthorEntityResponseCollection {
    nodes: [Author!]!
    pageInfo: Pagination!
}

input BookingFiltersInput {
    documentId: IDFilterInput
    users_permissions_user: UsersPermissionsUserFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    locale: StringFilterInput
    localizations: BookingFiltersInput
    and: [BookingFiltersInput]
    or: [BookingFiltersInput]
    not: BookingFiltersInput
}

input BookingInput {
    users_permissions_user: ID
    publishedAt: DateTime
}

type Booking {
    documentId: ID!
    users_permissions_user: UsersPermissionsUser
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
    locale: String
    localizations_connection(filters: BookingFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): BookingRelationResponseCollection
    localizations(filters: BookingFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Booking]!
}

type BookingEntityResponseCollection {
    nodes: [Booking!]!
    pageInfo: Pagination!
}

type BookingRelationResponseCollection {
    nodes: [Booking!]!
}

input CategoryFiltersInput {
    documentId: IDFilterInput
    name: StringFilterInput
    slug: StringFilterInput
    articles: ArticleFiltersInput
    description: StringFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [CategoryFiltersInput]
    or: [CategoryFiltersInput]
    not: CategoryFiltersInput
}

input CategoryInput {
    name: String
    slug: String
    articles: [ID]
    description: String
    publishedAt: DateTime
}

type Category {
    documentId: ID!
    name: String
    slug: String
    articles_connection(filters: ArticleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ArticleRelationResponseCollection
    articles(filters: ArticleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Article]!
    description: String
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type CategoryEntityResponseCollection {
    nodes: [Category!]!
    pageInfo: Pagination!
}

enum ENUM_CLASS_INTENSITY {
    low_1
    medium_2
    high_3
}

input ClassFiltersInput {
    documentId: IDFilterInput
    Name: StringFilterInput
    Intensity: StringFilterInput
    Information: StringFilterInput
    Description: JSONFilterInput
    teachers: TeacherFiltersInput
    disciplines: DisciplineFiltersInput
    Duration: IntFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [ClassFiltersInput]
    or: [ClassFiltersInput]
    not: ClassFiltersInput
}

input ClassInput {
    Name: String
    Intensity: ENUM_CLASS_INTENSITY
    Information: String
    Photo: [ID]
    Description: JSON
    teachers: [ID]
    disciplines: [ID]
    Duration: Int
    publishedAt: DateTime
}

type Class {
    documentId: ID!
    Name: String!
    Intensity: ENUM_CLASS_INTENSITY
    Information: String
    Photo_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
    Photo(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UploadFile]!
    Description: JSON
    teachers_connection(filters: TeacherFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TeacherRelationResponseCollection
    teachers(filters: TeacherFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Teacher]!
    disciplines_connection(filters: DisciplineFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): DisciplineRelationResponseCollection
    disciplines(filters: DisciplineFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Discipline]!
    Duration: Int
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type ClassEntityResponseCollection {
    nodes: [Class!]!
    pageInfo: Pagination!
}

type ClassRelationResponseCollection {
    nodes: [Class!]!
}

input DisciplineFiltersInput {
    documentId: IDFilterInput
    Name: StringFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [DisciplineFiltersInput]
    or: [DisciplineFiltersInput]
    not: DisciplineFiltersInput
}

input DisciplineInput {
    Name: String
    Icon: ID
    publishedAt: DateTime
}

type Discipline {
    documentId: ID!
    Name: String!
    Icon: UploadFile
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type DisciplineEntityResponseCollection {
    nodes: [Discipline!]!
    pageInfo: Pagination!
}

type DisciplineRelationResponseCollection {
    nodes: [Discipline!]!
}

input GlobalInput {
    siteName: String
    favicon: ID
    siteDescription: String
    defaultSeo: ComponentSharedSeoInput
    publishedAt: DateTime
}

type Global {
    documentId: ID!
    siteName: String!
    favicon: UploadFile
    siteDescription: String!
    defaultSeo: ComponentSharedSeo
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

input LandingPageInput {
    Section_One: ComponentLandingSectionsSectionOneInput
    Section_Two: ComponentLandingSectionsSectionTwoInput
    Section_Three: ComponentLandingSectionsSectionThreeInput
    Section_Four: ComponentLandingSectionsSectionFourInput
    Section_Five: ComponentLandingSectionsSectionFiveInput
    Section_Six: ComponentLandingSectionsSectionSixInput
    Section_Seven: ComponentLandingSectionsSectionSevenInput
    Section_Eight: ComponentLandingSectionsSectionEightInput
    publishedAt: DateTime
}

type LandingPage {
    documentId: ID!
    Section_One: ComponentLandingSectionsSectionOne
    Section_Two: ComponentLandingSectionsSectionTwo
    Section_Three: ComponentLandingSectionsSectionThree
    Section_Four: ComponentLandingSectionsSectionFour
    Section_Five: ComponentLandingSectionsSectionFive
    Section_Six: ComponentLandingSectionsSectionSix
    Section_Seven: ComponentLandingSectionsSectionSeven
    Section_Eight: ComponentLandingSectionsSectionEight
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
    locale: String
    localizations_connection: LandingPageRelationResponseCollection
    localizations: [LandingPage]!
}

type LandingPageRelationResponseCollection {
    nodes: [LandingPage!]!
}

input TeacherFiltersInput {
    documentId: IDFilterInput
    Name: StringFilterInput
    Active: BooleanFilterInput
    Description: JSONFilterInput
    Rating: FloatFilterInput
    classes: ClassFiltersInput
    disciplines: DisciplineFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    locale: StringFilterInput
    localizations: TeacherFiltersInput
    and: [TeacherFiltersInput]
    or: [TeacherFiltersInput]
    not: TeacherFiltersInput
}

input TeacherInput {
    Photo: ID
    Name: String
    Active: Boolean
    Description: JSON
    Rating: Float
    classes: [ID]
    disciplines: [ID]
    publishedAt: DateTime
}

type Teacher {
    documentId: ID!
    Photo: UploadFile
    Name: String!
    Active: Boolean
    Description: JSON
    Rating: Float
    classes_connection(filters: ClassFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ClassRelationResponseCollection
    classes(filters: ClassFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Class]!
    disciplines_connection(filters: DisciplineFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): DisciplineRelationResponseCollection
    disciplines(filters: DisciplineFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Discipline]!
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
    locale: String
    localizations_connection(filters: TeacherFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TeacherRelationResponseCollection
    localizations(filters: TeacherFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Teacher]!
}

type TeacherEntityResponseCollection {
    nodes: [Teacher!]!
    pageInfo: Pagination!
}

type TeacherRelationResponseCollection {
    nodes: [Teacher!]!
}

union GenericMorph = ComponentSharedSlider | ComponentSharedSeo | ComponentSharedRichText | ComponentSharedQuote | ComponentSharedMethod | ComponentSharedMedia | ComponentSharedEventTime | ComponentLandingSectionsSectionTwo | ComponentLandingSectionsSectionThree | ComponentLandingSectionsSectionSix | ComponentLandingSectionsSectionSeven | ComponentLandingSectionsSectionOne | ComponentLandingSectionsSectionFour | ComponentLandingSectionsSectionFive | ComponentLandingSectionsSectionEight | ComponentSectionTitle | ComponentSectionShapeTitle | ComponentSectionIconDescription | ComponentSectionHiddenLink | ComponentSectionDetailedDescription | ComponentSectionButton | ComponentSectionAccordion | UploadFile | I18NLocale | ReviewWorkflowsWorkflow | ReviewWorkflowsWorkflowStage | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser | About | Article | Author | Booking | Category | Class | Discipline | Global | LandingPage | Teacher

input FileInfoInput {
    name: String
    alternativeText: String
    caption: String
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type UsersPermissionsMe {
    id: ID!
    documentId: ID!
    username: String!
    email: String
    confirmed: Boolean
    blocked: Boolean
    role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
    id: ID!
    name: String!
    description: String
    type: String
}

input UsersPermissionsRegisterInput {
    username: String!
    email: String!
    password: String!
}

input UsersPermissionsLoginInput {
    identifier: String!
    password: String!
    provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
    ok: Boolean!
}

type UsersPermissionsLoginPayload {
    jwt: String
    user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
    ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
    ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
    ok: Boolean!
}

input PaginationArg {
    page: Int
    pageSize: Int
    start: Int
    limit: Int
}

type Query {
    uploadFile(documentId: ID!, status: PublicationStatus = PUBLISHED): UploadFile
    uploadFiles_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UploadFileEntityResponseCollection
    uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UploadFile]!
    i18NLocale(documentId: ID!, status: PublicationStatus = PUBLISHED): I18NLocale
    i18NLocales_connection(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): I18NLocaleEntityResponseCollection
    i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [I18NLocale]!
    reviewWorkflowsWorkflow(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflow
    reviewWorkflowsWorkflows_connection(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowEntityResponseCollection
    reviewWorkflowsWorkflows(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflow]!
    reviewWorkflowsWorkflowStage(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStage
    reviewWorkflowsWorkflowStages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStageEntityResponseCollection
    reviewWorkflowsWorkflowStages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflowStage]!
    usersPermissionsRole(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsRole
    usersPermissionsRoles_connection(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsRoleEntityResponseCollection
    usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsRole]!
    usersPermissionsUser(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsUser
    usersPermissionsUsers_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsUserEntityResponseCollection
    usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsUser]!
    about(status: PublicationStatus = PUBLISHED): About
    article(documentId: ID!, status: PublicationStatus = PUBLISHED): Article
    articles_connection(filters: ArticleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ArticleEntityResponseCollection
    articles(filters: ArticleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Article]!
    author(documentId: ID!, status: PublicationStatus = PUBLISHED): Author
    authors_connection(filters: AuthorFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): AuthorEntityResponseCollection
    authors(filters: AuthorFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Author]!
    booking(
        documentId: ID!
        status: PublicationStatus = PUBLISHED

        """The locale to use for the query"""
        locale: I18NLocaleCode
    ): Booking
    bookings_connection(
        filters: BookingFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
        status: PublicationStatus = PUBLISHED

        """The locale to use for the query"""
        locale: I18NLocaleCode
    ): BookingEntityResponseCollection
    bookings(
        filters: BookingFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
        status: PublicationStatus = PUBLISHED

        """The locale to use for the query"""
        locale: I18NLocaleCode
    ): [Booking]!
    category(documentId: ID!, status: PublicationStatus = PUBLISHED): Category
    categories_connection(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): CategoryEntityResponseCollection
    categories(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Category]!
    class(documentId: ID!, status: PublicationStatus = PUBLISHED): Class
    classes_connection(filters: ClassFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ClassEntityResponseCollection
    classes(filters: ClassFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Class]!
    discipline(documentId: ID!, status: PublicationStatus = PUBLISHED): Discipline
    disciplines_connection(filters: DisciplineFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): DisciplineEntityResponseCollection
    disciplines(filters: DisciplineFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Discipline]!
    global(status: PublicationStatus = PUBLISHED): Global
    landingPage(
        status: PublicationStatus = PUBLISHED

        """The locale to use for the query"""
        locale: I18NLocaleCode
    ): LandingPage
    teacher(
        documentId: ID!
        status: PublicationStatus = PUBLISHED

        """The locale to use for the query"""
        locale: I18NLocaleCode
    ): Teacher
    teachers_connection(
        filters: TeacherFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
        status: PublicationStatus = PUBLISHED

        """The locale to use for the query"""
        locale: I18NLocaleCode
    ): TeacherEntityResponseCollection
    teachers(
        filters: TeacherFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
        status: PublicationStatus = PUBLISHED

        """The locale to use for the query"""
        locale: I18NLocaleCode
    ): [Teacher]!
    me: UsersPermissionsMe
}

type Mutation {
    createReviewWorkflowsWorkflow(status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowInput!): ReviewWorkflowsWorkflow
    updateReviewWorkflowsWorkflow(documentId: ID!, status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowInput!): ReviewWorkflowsWorkflow
    deleteReviewWorkflowsWorkflow(documentId: ID!): DeleteMutationResponse
    createReviewWorkflowsWorkflowStage(status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowStageInput!): ReviewWorkflowsWorkflowStage
    updateReviewWorkflowsWorkflowStage(documentId: ID!, status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowStageInput!): ReviewWorkflowsWorkflowStage
    deleteReviewWorkflowsWorkflowStage(documentId: ID!): DeleteMutationResponse
    updateAbout(status: PublicationStatus = PUBLISHED, data: AboutInput!): About
    deleteAbout: DeleteMutationResponse
    createArticle(status: PublicationStatus = PUBLISHED, data: ArticleInput!): Article
    updateArticle(documentId: ID!, status: PublicationStatus = PUBLISHED, data: ArticleInput!): Article
    deleteArticle(documentId: ID!): DeleteMutationResponse
    createAuthor(status: PublicationStatus = PUBLISHED, data: AuthorInput!): Author
    updateAuthor(documentId: ID!, status: PublicationStatus = PUBLISHED, data: AuthorInput!): Author
    deleteAuthor(documentId: ID!): DeleteMutationResponse
    createBooking(
        status: PublicationStatus = PUBLISHED
        data: BookingInput!

        """The locale to use for the query"""
        locale: I18NLocaleCode
    ): Booking
    updateBooking(
        documentId: ID!
        status: PublicationStatus = PUBLISHED
        data: BookingInput!

        """The locale to use for the query"""
        locale: I18NLocaleCode
    ): Booking
    deleteBooking(
        documentId: ID!

        """The locale to use for the query"""
        locale: I18NLocaleCode
    ): DeleteMutationResponse
    createCategory(status: PublicationStatus = PUBLISHED, data: CategoryInput!): Category
    updateCategory(documentId: ID!, status: PublicationStatus = PUBLISHED, data: CategoryInput!): Category
    deleteCategory(documentId: ID!): DeleteMutationResponse
    createClass(status: PublicationStatus = PUBLISHED, data: ClassInput!): Class
    updateClass(documentId: ID!, status: PublicationStatus = PUBLISHED, data: ClassInput!): Class
    deleteClass(documentId: ID!): DeleteMutationResponse
    createDiscipline(status: PublicationStatus = PUBLISHED, data: DisciplineInput!): Discipline
    updateDiscipline(documentId: ID!, status: PublicationStatus = PUBLISHED, data: DisciplineInput!): Discipline
    deleteDiscipline(documentId: ID!): DeleteMutationResponse
    updateGlobal(status: PublicationStatus = PUBLISHED, data: GlobalInput!): Global
    deleteGlobal: DeleteMutationResponse
    updateLandingPage(
        status: PublicationStatus = PUBLISHED
        data: LandingPageInput!

        """The locale to use for the query"""
        locale: I18NLocaleCode
    ): LandingPage
    deleteLandingPage(
        """The locale to use for the query"""
        locale: I18NLocaleCode
    ): DeleteMutationResponse
    createTeacher(
        status: PublicationStatus = PUBLISHED
        data: TeacherInput!

        """The locale to use for the query"""
        locale: I18NLocaleCode
    ): Teacher
    updateTeacher(
        documentId: ID!
        status: PublicationStatus = PUBLISHED
        data: TeacherInput!

        """The locale to use for the query"""
        locale: I18NLocaleCode
    ): Teacher
    deleteTeacher(
        documentId: ID!

        """The locale to use for the query"""
        locale: I18NLocaleCode
    ): DeleteMutationResponse
    updateUploadFile(id: ID!, info: FileInfoInput): UploadFile!
    deleteUploadFile(id: ID!): UploadFile

    """Create a new role"""
    createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

    """Update an existing role"""
    updateUsersPermissionsRole(id: ID!, data: UsersPermissionsRoleInput!): UsersPermissionsUpdateRolePayload

    """Delete an existing role"""
    deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

    """Create a new user"""
    createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!

    """Update an existing user"""
    updateUsersPermissionsUser(id: ID!, data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!

    """Delete an existing user"""
    deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
    login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

    """Register a user"""
    register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

    """Request a reset password token"""
    forgotPassword(email: String!): UsersPermissionsPasswordPayload

    """
    Reset user password. Confirm with a code (resetToken from forgotPassword)
    """
    resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload

    """Change user password. Confirm with the current password."""
    changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload

    """Confirm an email users email address"""
    emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
