"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format HH:mm:ss.SSS"""
scalar Time

type Error {
    code: String!
    message: String
}

type Pagination {
    total: Int!
    page: Int!
    pageSize: Int!
    pageCount: Int!
}

type DeleteMutationResponse {
    documentId: ID!
}

enum PublicationStatus {
    DRAFT
    PUBLISHED
}

input IDFilterInput {
    and: [ID]
    or: [ID]
    not: IDFilterInput
    eq: ID
    eqi: ID
    ne: ID
    nei: ID
    startsWith: ID
    endsWith: ID
    contains: ID
    notContains: ID
    containsi: ID
    notContainsi: ID
    gt: ID
    gte: ID
    lt: ID
    lte: ID
    null: Boolean
    notNull: Boolean
    in: [ID]
    notIn: [ID]
    between: [ID]
}

input BooleanFilterInput {
    and: [Boolean]
    or: [Boolean]
    not: BooleanFilterInput
    eq: Boolean
    eqi: Boolean
    ne: Boolean
    nei: Boolean
    startsWith: Boolean
    endsWith: Boolean
    contains: Boolean
    notContains: Boolean
    containsi: Boolean
    notContainsi: Boolean
    gt: Boolean
    gte: Boolean
    lt: Boolean
    lte: Boolean
    null: Boolean
    notNull: Boolean
    in: [Boolean]
    notIn: [Boolean]
    between: [Boolean]
}

input StringFilterInput {
    and: [String]
    or: [String]
    not: StringFilterInput
    eq: String
    eqi: String
    ne: String
    nei: String
    startsWith: String
    endsWith: String
    contains: String
    notContains: String
    containsi: String
    notContainsi: String
    gt: String
    gte: String
    lt: String
    lte: String
    null: Boolean
    notNull: Boolean
    in: [String]
    notIn: [String]
    between: [String]
}

input IntFilterInput {
    and: [Int]
    or: [Int]
    not: IntFilterInput
    eq: Int
    eqi: Int
    ne: Int
    nei: Int
    startsWith: Int
    endsWith: Int
    contains: Int
    notContains: Int
    containsi: Int
    notContainsi: Int
    gt: Int
    gte: Int
    lt: Int
    lte: Int
    null: Boolean
    notNull: Boolean
    in: [Int]
    notIn: [Int]
    between: [Int]
}

input FloatFilterInput {
    and: [Float]
    or: [Float]
    not: FloatFilterInput
    eq: Float
    eqi: Float
    ne: Float
    nei: Float
    startsWith: Float
    endsWith: Float
    contains: Float
    notContains: Float
    containsi: Float
    notContainsi: Float
    gt: Float
    gte: Float
    lt: Float
    lte: Float
    null: Boolean
    notNull: Boolean
    in: [Float]
    notIn: [Float]
    between: [Float]
}

input TimeFilterInput {
    and: [Time]
    or: [Time]
    not: TimeFilterInput
    eq: Time
    eqi: Time
    ne: Time
    nei: Time
    startsWith: Time
    endsWith: Time
    contains: Time
    notContains: Time
    containsi: Time
    notContainsi: Time
    gt: Time
    gte: Time
    lt: Time
    lte: Time
    null: Boolean
    notNull: Boolean
    in: [Time]
    notIn: [Time]
    between: [Time]
}

input DateTimeFilterInput {
    and: [DateTime]
    or: [DateTime]
    not: DateTimeFilterInput
    eq: DateTime
    eqi: DateTime
    ne: DateTime
    nei: DateTime
    startsWith: DateTime
    endsWith: DateTime
    contains: DateTime
    notContains: DateTime
    containsi: DateTime
    notContainsi: DateTime
    gt: DateTime
    gte: DateTime
    lt: DateTime
    lte: DateTime
    null: Boolean
    notNull: Boolean
    in: [DateTime]
    notIn: [DateTime]
    between: [DateTime]
}

input JSONFilterInput {
    and: [JSON]
    or: [JSON]
    not: JSONFilterInput
    eq: JSON
    eqi: JSON
    ne: JSON
    nei: JSON
    startsWith: JSON
    endsWith: JSON
    contains: JSON
    notContains: JSON
    containsi: JSON
    notContainsi: JSON
    gt: JSON
    gte: JSON
    lt: JSON
    lte: JSON
    null: Boolean
    notNull: Boolean
    in: [JSON]
    notIn: [JSON]
    between: [JSON]
}

type ComponentSharedSlider {
    id: ID!
    files_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
    files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UploadFile]!
}

input ComponentSharedSeoInput {
    id: ID
    metaTitle: String
    metaDescription: String
    shareImage: ID
}

type ComponentSharedSeo {
    id: ID!
    metaTitle: String!
    metaDescription: String!
    shareImage: UploadFile
}

type ComponentSharedRichText {
    id: ID!
    body: String
}

input ComponentSharedQuoteInput {
    id: ID
    title: String
    motto: String
}

type ComponentSharedQuote {
    id: ID!
    title: String
    motto: String
}

type ComponentSharedMedia {
    id: ID!
    file: UploadFile
}

input ComponentSharedHiddenLinkFiltersInput {
    Title: StringFilterInput
    Link: StringFilterInput
    and: [ComponentSharedHiddenLinkFiltersInput]
    or: [ComponentSharedHiddenLinkFiltersInput]
    not: ComponentSharedHiddenLinkFiltersInput
}

input ComponentSharedHiddenLinkInput {
    id: ID
    Title: String
    Link: String
}

type ComponentSharedHiddenLink {
    id: ID!
    Title: String!
    Link: String!
}

enum ENUM_COMPONENTSECTIONTITLE_PLACEMENT {
    Left
    Center
    Right
}

input ComponentSectionTitleFiltersInput {
    Title: StringFilterInput
    Placement: StringFilterInput
    and: [ComponentSectionTitleFiltersInput]
    or: [ComponentSectionTitleFiltersInput]
    not: ComponentSectionTitleFiltersInput
}

input ComponentSectionTitleInput {
    id: ID
    Title: String
    Placement: ENUM_COMPONENTSECTIONTITLE_PLACEMENT
}

type ComponentSectionTitle {
    id: ID!
    Title: String!
    Placement: ENUM_COMPONENTSECTIONTITLE_PLACEMENT!
}

input ComponentSectionShapeTitleFiltersInput {
    Title: StringFilterInput
    and: [ComponentSectionShapeTitleFiltersInput]
    or: [ComponentSectionShapeTitleFiltersInput]
    not: ComponentSectionShapeTitleFiltersInput
}

input ComponentSectionShapeTitleInput {
    id: ID
    Title: String
    Shape: ID
}

type ComponentSectionShapeTitle {
    id: ID!
    Title: String!
    Shape: UploadFile!
}

input ComponentSectionIconDescriptionFiltersInput {
    Description: StringFilterInput
    and: [ComponentSectionIconDescriptionFiltersInput]
    or: [ComponentSectionIconDescriptionFiltersInput]
    not: ComponentSectionIconDescriptionFiltersInput
}

input ComponentSectionIconDescriptionInput {
    id: ID
    Description: String
    Icon: ID
}

type ComponentSectionIconDescription {
    id: ID!
    Description: String!
    Icon: UploadFile!
}

enum ENUM_COMPONENTSECTIONBUTTON_VARIANT {
    primary
    secondary
    transparent
}

input ComponentSectionButtonFiltersInput {
    Text: StringFilterInput
    Variant: StringFilterInput
    action: StringFilterInput
    and: [ComponentSectionButtonFiltersInput]
    or: [ComponentSectionButtonFiltersInput]
    not: ComponentSectionButtonFiltersInput
}

input ComponentSectionButtonInput {
    id: ID
    Text: String
    Variant: ENUM_COMPONENTSECTIONBUTTON_VARIANT
    action: String
}

type ComponentSectionButton {
    id: ID!
    Text: String!
    Variant: ENUM_COMPONENTSECTIONBUTTON_VARIANT
    action: String
}

input ComponentSectionAccordionFiltersInput {
    Title: StringFilterInput
    Description: StringFilterInput
    and: [ComponentSectionAccordionFiltersInput]
    or: [ComponentSectionAccordionFiltersInput]
    not: ComponentSectionAccordionFiltersInput
}

input ComponentSectionAccordionInput {
    id: ID
    Title: String
    Description: String
}

type ComponentSectionAccordion {
    id: ID!
    Title: String!
    Description: String
}

input ComponentLandingPageComponentsSectionTwoInput {
    id: ID
    Title: ComponentSectionTitleInput
    ListDescription: [ComponentSectionIconDescriptionInput]
}

type ComponentLandingPageComponentsSectionTwo {
    id: ID!
    Title: ComponentSectionTitle
    ListDescription(filters: ComponentSectionIconDescriptionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSectionIconDescription]
}

input ComponentLandingPageComponentsSectionThreeInput {
    id: ID
    Title: ComponentSharedQuoteInput
    Button: [ComponentSectionButtonInput]
    Photos: [ID]
    Description: JSON
}

type ComponentLandingPageComponentsSectionThree {
    id: ID!
    Title: ComponentSharedQuote!
    Button(filters: ComponentSectionButtonFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSectionButton]
    Photos_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
    Photos(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UploadFile]!
    Description: JSON!
}

input ComponentLandingPageComponentsSectionSixInput {
    id: ID
    Gallery: [ID]
    Title: ComponentSectionTitleInput
    Description: String
    Button: ComponentSectionButtonInput
}

type ComponentLandingPageComponentsSectionSix {
    id: ID!
    Gallery_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
    Gallery(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UploadFile]!
    Title: ComponentSectionTitle
    Description: String
    Button: ComponentSectionButton
}

input ComponentLandingPageComponentsSectionSevenInput {
    id: ID
    Title: String
    Route: [ComponentSharedHiddenLinkInput]
    Placement: String
}

type ComponentLandingPageComponentsSectionSeven {
    id: ID!
    Title: String
    Route(filters: ComponentSharedHiddenLinkFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSharedHiddenLink]
    Placement: String!
}

input ComponentLandingPageComponentsSectionOneInput {
    id: ID
    Title: [ComponentSectionTitleInput]
    Buttons: [ComponentSectionButtonInput]
}

type ComponentLandingPageComponentsSectionOne {
    id: ID!
    Title(filters: ComponentSectionTitleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSectionTitle]
    Buttons(filters: ComponentSectionButtonFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSectionButton]
}

input ComponentLandingPageComponentsSectionFourInput {
    id: ID
    Title: ComponentSectionTitleInput
    Shape_Titles: [ComponentSectionShapeTitleInput]
}

type ComponentLandingPageComponentsSectionFour {
    id: ID!
    Title: ComponentSectionTitle
    Shape_Titles(filters: ComponentSectionShapeTitleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSectionShapeTitle]
}

input ComponentLandingPageComponentsSectionFiveInput {
    id: ID
    Title: String
    Button: ComponentSectionButtonInput
}

type ComponentLandingPageComponentsSectionFive {
    id: ID!
    Title: String!
    Button: ComponentSectionButton!
}

input ComponentLandingPageComponentsSectionEightInput {
    id: ID
    Title: ComponentSectionTitleInput
    FAQ_elements: [ComponentSectionAccordionInput]
}

type ComponentLandingPageComponentsSectionEight {
    id: ID!
    Title: ComponentSectionTitle
    FAQ_elements(filters: ComponentSectionAccordionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSectionAccordion]
}

input UploadFileFiltersInput {
    documentId: IDFilterInput
    name: StringFilterInput
    alternativeText: StringFilterInput
    caption: StringFilterInput
    width: IntFilterInput
    height: IntFilterInput
    formats: JSONFilterInput
    hash: StringFilterInput
    ext: StringFilterInput
    mime: StringFilterInput
    size: FloatFilterInput
    url: StringFilterInput
    previewUrl: StringFilterInput
    provider: StringFilterInput
    provider_metadata: JSONFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [UploadFileFiltersInput]
    or: [UploadFileFiltersInput]
    not: UploadFileFiltersInput
}

type UploadFile {
    documentId: ID!
    name: String!
    alternativeText: String
    caption: String
    width: Int
    height: Int
    formats: JSON
    hash: String!
    ext: String
    mime: String!
    size: Float!
    url: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related: [GenericMorph]
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type UploadFileEntityResponseCollection {
    nodes: [UploadFile!]!
    pageInfo: Pagination!
}

type UploadFileRelationResponseCollection {
    nodes: [UploadFile!]!
}

input I18NLocaleFiltersInput {
    documentId: IDFilterInput
    name: StringFilterInput
    code: StringFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [I18NLocaleFiltersInput]
    or: [I18NLocaleFiltersInput]
    not: I18NLocaleFiltersInput
}

type I18NLocale {
    documentId: ID!
    name: String
    code: String
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type I18NLocaleEntityResponseCollection {
    nodes: [I18NLocale!]!
    pageInfo: Pagination!
}

input ReviewWorkflowsWorkflowFiltersInput {
    documentId: IDFilterInput
    name: StringFilterInput
    stages: ReviewWorkflowsWorkflowStageFiltersInput
    stageRequiredToPublish: ReviewWorkflowsWorkflowStageFiltersInput
    contentTypes: JSONFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [ReviewWorkflowsWorkflowFiltersInput]
    or: [ReviewWorkflowsWorkflowFiltersInput]
    not: ReviewWorkflowsWorkflowFiltersInput
}

input ReviewWorkflowsWorkflowInput {
    name: String
    stages: [ID]
    stageRequiredToPublish: ID
    contentTypes: JSON
    publishedAt: DateTime
}

type ReviewWorkflowsWorkflow {
    documentId: ID!
    name: String!
    stages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ReviewWorkflowsWorkflowStageRelationResponseCollection
    stages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ReviewWorkflowsWorkflowStage]!
    stageRequiredToPublish: ReviewWorkflowsWorkflowStage
    contentTypes: JSON!
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type ReviewWorkflowsWorkflowEntityResponseCollection {
    nodes: [ReviewWorkflowsWorkflow!]!
    pageInfo: Pagination!
}

input ReviewWorkflowsWorkflowStageFiltersInput {
    documentId: IDFilterInput
    name: StringFilterInput
    color: StringFilterInput
    workflow: ReviewWorkflowsWorkflowFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [ReviewWorkflowsWorkflowStageFiltersInput]
    or: [ReviewWorkflowsWorkflowStageFiltersInput]
    not: ReviewWorkflowsWorkflowStageFiltersInput
}

input ReviewWorkflowsWorkflowStageInput {
    name: String
    color: String
    workflow: ID
    publishedAt: DateTime
}

type ReviewWorkflowsWorkflowStage {
    documentId: ID!
    name: String
    color: String
    workflow: ReviewWorkflowsWorkflow
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type ReviewWorkflowsWorkflowStageEntityResponseCollection {
    nodes: [ReviewWorkflowsWorkflowStage!]!
    pageInfo: Pagination!
}

type ReviewWorkflowsWorkflowStageRelationResponseCollection {
    nodes: [ReviewWorkflowsWorkflowStage!]!
}

input UsersPermissionsPermissionFiltersInput {
    documentId: IDFilterInput
    action: StringFilterInput
    role: UsersPermissionsRoleFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [UsersPermissionsPermissionFiltersInput]
    or: [UsersPermissionsPermissionFiltersInput]
    not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
    documentId: ID!
    action: String!
    role: UsersPermissionsRole
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type UsersPermissionsPermissionRelationResponseCollection {
    nodes: [UsersPermissionsPermission!]!
}

input UsersPermissionsRoleFiltersInput {
    documentId: IDFilterInput
    name: StringFilterInput
    description: StringFilterInput
    type: StringFilterInput
    permissions: UsersPermissionsPermissionFiltersInput
    users: UsersPermissionsUserFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [UsersPermissionsRoleFiltersInput]
    or: [UsersPermissionsRoleFiltersInput]
    not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
    name: String
    description: String
    type: String
    permissions: [ID]
    users: [ID]
    publishedAt: DateTime
}

type UsersPermissionsRole {
    documentId: ID!
    name: String!
    description: String
    type: String
    permissions_connection(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
    permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsPermission]!
    users_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
    users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsUser]!
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type UsersPermissionsRoleEntityResponseCollection {
    nodes: [UsersPermissionsRole!]!
    pageInfo: Pagination!
}

input UsersPermissionsUserFiltersInput {
    documentId: IDFilterInput
    username: StringFilterInput
    email: StringFilterInput
    provider: StringFilterInput
    confirmed: BooleanFilterInput
    blocked: BooleanFilterInput
    role: UsersPermissionsRoleFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [UsersPermissionsUserFiltersInput]
    or: [UsersPermissionsUserFiltersInput]
    not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
    username: String
    email: String
    provider: String
    confirmed: Boolean
    blocked: Boolean
    role: ID
    publishedAt: DateTime
    password: String
}

type UsersPermissionsUser {
    documentId: ID!
    username: String!
    email: String!
    provider: String
    confirmed: Boolean
    blocked: Boolean
    role: UsersPermissionsRole
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type UsersPermissionsUserEntityResponse {
    data: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponseCollection {
    nodes: [UsersPermissionsUser!]!
    pageInfo: Pagination!
}

type UsersPermissionsUserRelationResponseCollection {
    nodes: [UsersPermissionsUser!]!
}

input EmailDesigner5EmailDesignerTemplateFiltersInput {
    documentId: IDFilterInput
    templateReferenceId: IntFilterInput
    design: JSONFilterInput
    name: StringFilterInput
    subject: StringFilterInput
    bodyHtml: StringFilterInput
    bodyText: StringFilterInput
    tags: JSONFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [EmailDesigner5EmailDesignerTemplateFiltersInput]
    or: [EmailDesigner5EmailDesignerTemplateFiltersInput]
    not: EmailDesigner5EmailDesignerTemplateFiltersInput
}

input EmailDesigner5EmailDesignerTemplateInput {
    templateReferenceId: Int
    design: JSON
    name: String
    subject: String
    bodyHtml: String
    bodyText: String
    tags: JSON
    publishedAt: DateTime
}

type EmailDesigner5EmailDesignerTemplate {
    documentId: ID!
    templateReferenceId: Int
    design: JSON
    name: String
    subject: String
    bodyHtml: String
    bodyText: String
    tags: JSON
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type EmailDesigner5EmailDesignerTemplateEntityResponseCollection {
    nodes: [EmailDesigner5EmailDesignerTemplate!]!
    pageInfo: Pagination!
}

union AboutBlocksDynamicZone = ComponentSharedMedia | ComponentSharedQuote | ComponentSharedRichText | ComponentSharedSlider | Error

scalar AboutBlocksDynamicZoneInput

input AboutInput {
    title: String
    blocks: [AboutBlocksDynamicZoneInput!]
    publishedAt: DateTime
}

type About {
    documentId: ID!
    title: String
    blocks: [AboutBlocksDynamicZone]
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

union ArticleBlocksDynamicZone = ComponentSharedMedia | ComponentSharedQuote | ComponentSharedRichText | ComponentSharedSlider | Error

scalar ArticleBlocksDynamicZoneInput

input ArticleFiltersInput {
    documentId: IDFilterInput
    title: StringFilterInput
    description: StringFilterInput
    slug: StringFilterInput
    author: AuthorFiltersInput
    category: CategoryFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [ArticleFiltersInput]
    or: [ArticleFiltersInput]
    not: ArticleFiltersInput
}

input ArticleInput {
    title: String
    description: String
    slug: String
    cover: ID
    author: ID
    category: ID
    blocks: [ArticleBlocksDynamicZoneInput!]
    publishedAt: DateTime
}

type Article {
    documentId: ID!
    title: String
    description: String
    slug: String
    cover: UploadFile
    author: Author
    category: Category
    blocks: [ArticleBlocksDynamicZone]
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type ArticleEntityResponseCollection {
    nodes: [Article!]!
    pageInfo: Pagination!
}

type ArticleRelationResponseCollection {
    nodes: [Article!]!
}

input AuthorFiltersInput {
    documentId: IDFilterInput
    name: StringFilterInput
    email: StringFilterInput
    articles: ArticleFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [AuthorFiltersInput]
    or: [AuthorFiltersInput]
    not: AuthorFiltersInput
}

input AuthorInput {
    name: String
    avatar: ID
    email: String
    articles: [ID]
    publishedAt: DateTime
}

type Author {
    documentId: ID!
    name: String
    avatar: UploadFile
    email: String
    articles_connection(filters: ArticleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ArticleRelationResponseCollection
    articles(filters: ArticleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Article]!
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type AuthorEntityResponseCollection {
    nodes: [Author!]!
    pageInfo: Pagination!
}

input CategoryFiltersInput {
    documentId: IDFilterInput
    name: StringFilterInput
    slug: StringFilterInput
    articles: ArticleFiltersInput
    description: StringFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [CategoryFiltersInput]
    or: [CategoryFiltersInput]
    not: CategoryFiltersInput
}

input CategoryInput {
    name: String
    slug: String
    articles: [ID]
    description: String
    publishedAt: DateTime
}

type Category {
    documentId: ID!
    name: String
    slug: String
    articles_connection(filters: ArticleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ArticleRelationResponseCollection
    articles(filters: ArticleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Article]!
    description: String
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type CategoryEntityResponseCollection {
    nodes: [Category!]!
    pageInfo: Pagination!
}

input ClassFiltersInput {
    documentId: IDFilterInput
    Timeslot: TimeFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    locale: StringFilterInput
    localizations: ClassFiltersInput
    and: [ClassFiltersInput]
    or: [ClassFiltersInput]
    not: ClassFiltersInput
}

input ClassInput {
    Timeslot: Time
    publishedAt: DateTime
}

type Class {
    documentId: ID!
    Timeslot: Time!
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
    locale: String
    localizations_connection(filters: ClassFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ClassRelationResponseCollection
    localizations(filters: ClassFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Class]!
}

type ClassEntityResponseCollection {
    nodes: [Class!]!
    pageInfo: Pagination!
}

type ClassRelationResponseCollection {
    nodes: [Class!]!
}

input GlobalInput {
    siteName: String
    favicon: ID
    siteDescription: String
    defaultSeo: ComponentSharedSeoInput
    publishedAt: DateTime
}

type Global {
    documentId: ID!
    siteName: String!
    favicon: UploadFile
    siteDescription: String!
    defaultSeo: ComponentSharedSeo
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

input LandingPageInput {
    Section_Two: ComponentLandingPageComponentsSectionTwoInput
    Section_One: ComponentLandingPageComponentsSectionOneInput
    Section_Three: ComponentLandingPageComponentsSectionThreeInput
    Section_Four: ComponentLandingPageComponentsSectionFourInput
    Section_Five: ComponentLandingPageComponentsSectionFiveInput
    Section_Six: ComponentLandingPageComponentsSectionSixInput
    Section_Seven: ComponentLandingPageComponentsSectionSevenInput
    Section_Eight: ComponentLandingPageComponentsSectionEightInput
    publishedAt: DateTime
}

type LandingPage {
    documentId: ID!
    Section_Two: ComponentLandingPageComponentsSectionTwo
    Section_One: ComponentLandingPageComponentsSectionOne
    Section_Three: ComponentLandingPageComponentsSectionThree
    Section_Four: ComponentLandingPageComponentsSectionFour
    Section_Five: ComponentLandingPageComponentsSectionFive
    Section_Six: ComponentLandingPageComponentsSectionSix
    Section_Seven: ComponentLandingPageComponentsSectionSeven
    Section_Eight: ComponentLandingPageComponentsSectionEight
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

union GenericMorph = ComponentSharedSlider | ComponentSharedSeo | ComponentSharedRichText | ComponentSharedQuote | ComponentSharedMedia | ComponentSharedHiddenLink | ComponentSectionTitle | ComponentSectionShapeTitle | ComponentSectionIconDescription | ComponentSectionButton | ComponentSectionAccordion | ComponentLandingPageComponentsSectionTwo | ComponentLandingPageComponentsSectionThree | ComponentLandingPageComponentsSectionSix | ComponentLandingPageComponentsSectionSeven | ComponentLandingPageComponentsSectionOne | ComponentLandingPageComponentsSectionFour | ComponentLandingPageComponentsSectionFive | ComponentLandingPageComponentsSectionEight | UploadFile | I18NLocale | ReviewWorkflowsWorkflow | ReviewWorkflowsWorkflowStage | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser | EmailDesigner5EmailDesignerTemplate | About | Article | Author | Category | Class | Global | LandingPage

input FileInfoInput {
    name: String
    alternativeText: String
    caption: String
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type UsersPermissionsMe {
    id: ID!
    documentId: ID!
    username: String!
    email: String
    confirmed: Boolean
    blocked: Boolean
    role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
    id: ID!
    name: String!
    description: String
    type: String
}

input UsersPermissionsRegisterInput {
    username: String!
    email: String!
    password: String!
}

input UsersPermissionsLoginInput {
    identifier: String!
    password: String!
    provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
    ok: Boolean!
}

type UsersPermissionsLoginPayload {
    jwt: String
    user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
    ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
    ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
    ok: Boolean!
}

input PaginationArg {
    page: Int
    pageSize: Int
    start: Int
    limit: Int
}

type Query {
    uploadFile(documentId: ID!, status: PublicationStatus = PUBLISHED): UploadFile
    uploadFiles_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UploadFileEntityResponseCollection
    uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UploadFile]!
    i18NLocale(documentId: ID!, status: PublicationStatus = PUBLISHED): I18NLocale
    i18NLocales_connection(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): I18NLocaleEntityResponseCollection
    i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [I18NLocale]!
    reviewWorkflowsWorkflow(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflow
    reviewWorkflowsWorkflows_connection(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowEntityResponseCollection
    reviewWorkflowsWorkflows(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflow]!
    reviewWorkflowsWorkflowStage(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStage
    reviewWorkflowsWorkflowStages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStageEntityResponseCollection
    reviewWorkflowsWorkflowStages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflowStage]!
    usersPermissionsRole(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsRole
    usersPermissionsRoles_connection(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsRoleEntityResponseCollection
    usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsRole]!
    usersPermissionsUser(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsUser
    usersPermissionsUsers_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsUserEntityResponseCollection
    usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsUser]!
    emailDesigner5EmailDesignerTemplate(documentId: ID!, status: PublicationStatus = PUBLISHED): EmailDesigner5EmailDesignerTemplate
    emailDesigner5EmailDesignerTemplates_connection(filters: EmailDesigner5EmailDesignerTemplateFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): EmailDesigner5EmailDesignerTemplateEntityResponseCollection
    emailDesigner5EmailDesignerTemplates(filters: EmailDesigner5EmailDesignerTemplateFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [EmailDesigner5EmailDesignerTemplate]!
    about(status: PublicationStatus = PUBLISHED): About
    article(documentId: ID!, status: PublicationStatus = PUBLISHED): Article
    articles_connection(filters: ArticleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ArticleEntityResponseCollection
    articles(filters: ArticleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Article]!
    author(documentId: ID!, status: PublicationStatus = PUBLISHED): Author
    authors_connection(filters: AuthorFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): AuthorEntityResponseCollection
    authors(filters: AuthorFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Author]!
    category(documentId: ID!, status: PublicationStatus = PUBLISHED): Category
    categories_connection(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): CategoryEntityResponseCollection
    categories(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Category]!
    class(
        documentId: ID!
        status: PublicationStatus = PUBLISHED

        """The locale to use for the query"""
        locale: I18NLocaleCode
    ): Class
    classes_connection(
        filters: ClassFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
        status: PublicationStatus = PUBLISHED

        """The locale to use for the query"""
        locale: I18NLocaleCode
    ): ClassEntityResponseCollection
    classes(
        filters: ClassFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
        status: PublicationStatus = PUBLISHED

        """The locale to use for the query"""
        locale: I18NLocaleCode
    ): [Class]!
    global(status: PublicationStatus = PUBLISHED): Global
    landingPage(status: PublicationStatus = PUBLISHED): LandingPage
    me: UsersPermissionsMe
}

type Mutation {
    createReviewWorkflowsWorkflow(status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowInput!): ReviewWorkflowsWorkflow
    updateReviewWorkflowsWorkflow(documentId: ID!, status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowInput!): ReviewWorkflowsWorkflow
    deleteReviewWorkflowsWorkflow(documentId: ID!): DeleteMutationResponse
    createReviewWorkflowsWorkflowStage(status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowStageInput!): ReviewWorkflowsWorkflowStage
    updateReviewWorkflowsWorkflowStage(documentId: ID!, status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowStageInput!): ReviewWorkflowsWorkflowStage
    deleteReviewWorkflowsWorkflowStage(documentId: ID!): DeleteMutationResponse
    createEmailDesigner5EmailDesignerTemplate(status: PublicationStatus = PUBLISHED, data: EmailDesigner5EmailDesignerTemplateInput!): EmailDesigner5EmailDesignerTemplate
    updateEmailDesigner5EmailDesignerTemplate(documentId: ID!, status: PublicationStatus = PUBLISHED, data: EmailDesigner5EmailDesignerTemplateInput!): EmailDesigner5EmailDesignerTemplate
    deleteEmailDesigner5EmailDesignerTemplate(documentId: ID!): DeleteMutationResponse
    updateAbout(status: PublicationStatus = PUBLISHED, data: AboutInput!): About
    deleteAbout: DeleteMutationResponse
    createArticle(status: PublicationStatus = PUBLISHED, data: ArticleInput!): Article
    updateArticle(documentId: ID!, status: PublicationStatus = PUBLISHED, data: ArticleInput!): Article
    deleteArticle(documentId: ID!): DeleteMutationResponse
    createAuthor(status: PublicationStatus = PUBLISHED, data: AuthorInput!): Author
    updateAuthor(documentId: ID!, status: PublicationStatus = PUBLISHED, data: AuthorInput!): Author
    deleteAuthor(documentId: ID!): DeleteMutationResponse
    createCategory(status: PublicationStatus = PUBLISHED, data: CategoryInput!): Category
    updateCategory(documentId: ID!, status: PublicationStatus = PUBLISHED, data: CategoryInput!): Category
    deleteCategory(documentId: ID!): DeleteMutationResponse
    createClass(
        status: PublicationStatus = PUBLISHED
        data: ClassInput!

        """The locale to use for the query"""
        locale: I18NLocaleCode
    ): Class
    updateClass(
        documentId: ID!
        status: PublicationStatus = PUBLISHED
        data: ClassInput!

        """The locale to use for the query"""
        locale: I18NLocaleCode
    ): Class
    deleteClass(
        documentId: ID!

        """The locale to use for the query"""
        locale: I18NLocaleCode
    ): DeleteMutationResponse
    updateGlobal(status: PublicationStatus = PUBLISHED, data: GlobalInput!): Global
    deleteGlobal: DeleteMutationResponse
    updateLandingPage(status: PublicationStatus = PUBLISHED, data: LandingPageInput!): LandingPage
    deleteLandingPage: DeleteMutationResponse
    updateUploadFile(id: ID!, info: FileInfoInput): UploadFile!
    deleteUploadFile(id: ID!): UploadFile

    """Create a new role"""
    createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

    """Update an existing role"""
    updateUsersPermissionsRole(id: ID!, data: UsersPermissionsRoleInput!): UsersPermissionsUpdateRolePayload

    """Delete an existing role"""
    deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

    """Create a new user"""
    createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!

    """Update an existing user"""
    updateUsersPermissionsUser(id: ID!, data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!

    """Delete an existing user"""
    deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
    login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

    """Register a user"""
    register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

    """Request a reset password token"""
    forgotPassword(email: String!): UsersPermissionsPasswordPayload

    """
    Reset user password. Confirm with a code (resetToken from forgotPassword)
    """
    resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload

    """Change user password. Confirm with the current password."""
    changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload

    """Confirm an email users email address"""
    emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
